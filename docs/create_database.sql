/* ============================================================== */
/* DATABASE: eco_db                                               */
/* ============================================================== */
-- CREATE DATABASE eco_db -- Comando geralmente executado fora do script principal ou via interface
--     WITH
--     ENCODING = 'UTF8'
--     LC_COLLATE = 'pt_BR.UTF-8'
--     LC_CTYPE = 'pt_BR.UTF-8'
--     TEMPLATE template0;

-- \c eco_db -- Comando psql para conectar ao banco

/* ============================================================== */
/* EXTENSIONS                                                     */
/* ============================================================== */
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

/* ============================================================== */
/* TABLES: GESTÃO DE USUÁRIOS E AUTENTICAÇÃO                     */
/* ============================================================== */

-- Usuários do Sistema (Depende de auth.users implicitamente)
CREATE TABLE IF NOT EXISTS public.usuarios (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  email character varying(255) not null,
  senha character varying(255) null, -- Hash da senha
  telefone character varying(255) null,
  localizacao character varying(255) null default null::character varying,
  foto character varying(255) null default null::character varying,
  pontos_totais bigint null default 0,
  data_nascimento date null,
  status character varying(255) null default 'Ativo'::character varying,
  ultimo_login timestamp without time zone null,
  genero character varying null,
  user_uid VARCHAR(255) NULL, -- Referência ao ID do Supabase Auth
  preferencias jsonb null default '{"notificacoes_app": true, "notificacoes_sms": false, "notificacoes_email": false, "notificacoes_whatsapp": false}'::jsonb,
  last_personal_data_update timestamp without time zone null,
  constraint usuarios_pkey primary key (id),
  constraint usuarios_email_key unique (email),
  -- Adicionar a FK para auth.users se ela ainda não existir via interface do Supabase
  constraint usuarios_user_uid_fkey foreign KEY (user_uid) references auth.users (id) on update cascade on delete cascade
);

-- Verificações de Usuário (Telefone/Email)
CREATE TABLE IF NOT EXISTS public.verificacoes (
  id serial not null,
  user_id bigint null,
  codigo character varying(6) null,
  token character varying(36) null,
  telefone character varying(255) null,
  email character varying(255) null,
  created_at timestamp without time zone null default now(),
  expires_at timestamp without time zone null,
  constraint verificacoes_pkey primary key (id),
  constraint verificacoes_user_id_fkey foreign KEY (user_id) references public.usuarios (id) on delete cascade -- Cascade se usuário for deletado
);

-- Recuperação de Senha
CREATE TABLE IF NOT EXISTS public.recuperacao_senha (
    id SERIAL PRIMARY KEY,
    user_id INT8 REFERENCES public.usuarios(id) ON DELETE CASCADE, -- Ligado ao usuário
    codigo VARCHAR(8),
    expires_at TIMESTAMP DEFAULT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);


-- Carteira Digital dos Usuários
CREATE TABLE IF NOT EXISTS public.carteira_digital (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  pontos bigint null default 0,
  saldo real null default 0, -- float4 é 'real'
  usuario_id bigint null,
  constraint carteira_digital_pkey primary key (id),
  constraint carteira_digital_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete cascade -- Se usuário for deletado, carteira também?
);

-- Troca de Pontos por Saldo
CREATE TABLE IF NOT EXISTS public.trocapontos (
  id bigint generated always as identity not null,
  usuario_id bigint not null,
  pontos_trocados bigint not null,
  saldo_obtido numeric not null,
  data_troca timestamp with time zone not null default now(),
  constraint trocapontos_pkey primary key (id),
  constraint fk_usuario_id foreign KEY (usuario_id) references public.usuarios (id) on delete cascade
);

/* ============================================================== */
/* TABLES: GESTÃO DE FUNCIONÁRIOS (ESTRUTURA INTERNA)             */
/* ============================================================== */

-- Departamentos
CREATE TABLE IF NOT EXISTS public.departamentos (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  status character varying(255) null default 'Ativo'::character varying,
  pessoas bigint null default 0,
  constraint departamentos_pkey primary key (id)
);

-- Cargos
CREATE TABLE IF NOT EXISTS public.cargos (
  id bigint not null, -- Assumindo que não é auto-incrementado
  nome character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  departamento_id bigint null,
  constraint cargos_pkey primary key (id),
  constraint cargos_departamento_id_fkey foreign KEY (departamento_id) references public.departamentos (id) on delete set null -- Se depto for deletado, cargo fica sem depto?
);

-- Candidatos
CREATE TABLE IF NOT EXISTS public.candidatos (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  email character varying(255) not null,
  senha character varying(255) not null, -- Hash
  telefone character varying(255) not null,
  status character varying(255) null default 'Em andamento'::character varying,
  curriculo character varying(255) null default null::character varying,
  bi character varying(255) null default null::character varying,
  descri_canditatura character varying(255) null default null::character varying,
  data_promocao timestamp without time zone null, -- Adicionado do schema original
  constraint candidatos_pkey primary key (id),
  constraint candidatos_email_key unique (email)
);

-- Agentes
CREATE TABLE IF NOT EXISTS public.agentes (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  email character varying(255) not null,
  senha character varying(255) not null, -- Hash
  telefone character varying(255) not null,
  genero character varying null, -- Era NOT NULL no schema original? Ajustado para NULLABLE
  status character varying(255) null default 'Ativo'::character varying,
  area character varying(255) not null,
  pontos_desempenho bigint null default 0,
  departamento_id bigint null,
  candidato_id bigint null,
  constraint agentes_pkey primary key (id),
  constraint agentes_email_key unique (email),
  constraint agentes_candidato_id_fkey foreign KEY (candidato_id) references public.candidatos (id) on delete set null, -- Se candidato deletado, agente perde a referência
  constraint agentes_departamento_id_fkey foreign KEY (departamento_id) references public.departamentos (id) on delete set null -- Se depto deletado, agente fica sem depto
);

-- Administradores
CREATE TABLE IF NOT EXISTS public.administradores (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  agente_id bigint null, -- Um admin PODE ter sido um agente antes
  email character varying(255) not null,
  senha character varying(255) not null, -- Hash
  departamento_id bigint null,
  constraint administradores_pkey primary key (id),
  constraint administradores_email_key unique (email),
  constraint administradores_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete set null, -- Se agente deletado, admin perde referência
  constraint administradores_departamento_id_fkey foreign KEY (departamento_id) references public.departamentos (id) on delete set null
);

create table public.tarefas_agente (
  id bigserial not null,
  titulo character varying(255) not null,
  descricao text null,
  tipo_tarefa character varying(50) not null,
  meta_objetivo_padrao integer not null,
  pontos_recompensa_padrao integer null default 0,
  status_catalogo character varying(50) null default 'ativa'::character varying,
  data_criacao timestamp with time zone not null default now(),
  constraint tarefas_agente_pkey primary key (id),
  constraint tarefas_agente_tipo_tarefa_key unique (tipo_tarefa),
  constraint tarefas_agente_status_catalogo_check check (
    (
      (status_catalogo)::text = any (
        (
          array[
            'ativa'::character varying,
            'inativa'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

create table public.agentes_tarefas_atribuidas (
  id bigserial not null,
  agente_id bigint not null,
  tarefa_id bigint not null,
  semana_ano character varying(7) not null,
  meta_agente integer not null,
  progresso_atual integer null default 0,
  status_atribuicao character varying(50) not null default 'pendente'::character varying,
  data_atribuicao timestamp with time zone not null default now(),
  data_limite_semana date not null,
  pontos_ganhos integer null default 0,
  admin_id_atribuidor bigint null,
  constraint agentes_tarefas_atribuidas_pkey primary key (id),
  constraint agentes_tarefas_atribuidas_agente_id_tarefa_id_semana_ano_key unique (agente_id, tarefa_id, semana_ano),
  constraint agentes_tarefas_atribuidas_admin_id_atribuidor_fkey foreign KEY (admin_id_atribuidor) references administradores (id) on delete set null,
  constraint agentes_tarefas_atribuidas_agente_id_fkey foreign KEY (agente_id) references agentes (id) on delete CASCADE,
  constraint agentes_tarefas_atribuidas_tarefa_id_fkey foreign KEY (tarefa_id) references tarefas_agente (id) on delete CASCADE,
  constraint agentes_tarefas_atribuidas_status_atribuicao_check check (
    (
      (status_atribuicao)::text = any (
        (
          array[
            'pendente'::character varying,
            'em_andamento'::character varying,
            'concluida'::character varying,
            'nao_cumprida'::character varying
          ]
        )::text[]
      )
    )
  )
) TABLESPACE pg_default;

/* ============================================================== */
/* TABLES: GESTÃO DE ECOPONTOS E MATERIAIS                        */
/* ============================================================== */

-- Ecopontos
CREATE TABLE IF NOT EXISTS public.ecopontos (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  localizacao character varying(255) null default null::character varying,
  status character varying(255) null default 'Ativo'::character varying,
  capacidade real null default 0,
  preenchido_atual real null default 0,
  sensor_peso real null default 0,
  sensor_tipo character varying(255) null default null::character varying,
  sensor_termico real null default 0,
  sensor_status character varying(255) null default null::character varying,
  material_suportado character varying(255) null default null::character varying,
  latitude numeric(10, 8) null,
  longitude numeric(11, 8) null,
  agente_responsavel_id bigint null,
  constraint ecopontos_pkey primary key (id),
  constraint ecopontos_agente_responsavel_id_fkey foreign KEY (agente_responsavel_id) references public.agentes (id) on update cascade on delete set null -- Se agente deletado, ecoponto fica sem responsável
);

-- Materiais
CREATE TABLE IF NOT EXISTS public.materiais (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  classe character varying(255) null default null::character varying,
  valor bigint null default 0,
  constraint materiais_pkey primary key (id)
);

/* ============================================================== */
/* TABLES: GESTÃO DE COLETAS                                      */
/* ============================================================== */

-- Coletas
CREATE TABLE IF NOT EXISTS public.coletas (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  data_coleta timestamp without time zone not null,
  data_coleta_fim timestamp without time zone null,
  status character varying(255) null default 'Em andamento'::character varying,
  agente_id bigint null,
  ecoponto_id bigint null,
  admin_id bigint null,
  constraint coletas_pkey primary key (id),
  constraint coletas_admin_id_fkey foreign KEY (admin_id) references public.administradores (id) on delete set null,
  constraint coletas_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete set null,
  constraint coletas_ecoponto_id_fkey foreign KEY (ecoponto_id) references public.ecopontos (id) on delete set null -- Ou CASCADE?
);

-- Detalhes das Coletas
CREATE TABLE IF NOT EXISTS public.detalhes_coletas (
    id bigint primary key generated by default as identity, -- Tornando auto-incrementável
    created_at timestamp NOT NULL DEFAULT now(),
    material_id bigint NULL, -- Permitir NULL se material for deletado
    peso float4 DEFAULT 0,
    ecoponto_id bigint NULL, -- Pode ser redundante, mas mantido do schema original
    coleta_id bigint NOT NULL, -- Ligação principal
    constraint fk_detalhes_coleta_coleta foreign key (coleta_id) references public.coletas(id) on delete cascade, -- Se a coleta for apagada, os detalhes também
    constraint fk_detalhes_coleta_material foreign key (material_id) references public.materiais(id) on delete set null,
    constraint fk_detalhes_coleta_ecoponto foreign key (ecoponto_id) references public.ecopontos(id) on delete set null
);


/* ============================================================== */
/* TABLES: GESTÃO DE RECICLAGEM E AVALIAÇÕES                      */
/* ============================================================== */

-- Reciclagem
CREATE TABLE IF NOT EXISTS public.reciclagem (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  peso real null default 0,
  usuario_id bigint null,
  agente_id bigint null,
  material_id bigint null, -- Permitir NULL? Schema original não tinha NOT NULL
  ecoponto_id bigint null, -- Permitir NULL? Schema original não tinha NOT NULL
  coleta_id bigint null,
  constraint reciclagem_pkey primary key (id),
  constraint reciclagem_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete set null,
  constraint reciclagem_coleta_id_fkey foreign KEY (coleta_id) references public.coletas (id) on update cascade on delete set null, -- SET NULL se coleta for deletada
  constraint reciclagem_ecoponto_id_fkey foreign KEY (ecoponto_id) references public.ecopontos (id) on delete set null,
  constraint reciclagem_material_id_fkey foreign KEY (material_id) references public.materiais (id) on delete set null,
  constraint reciclagem_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete set null
);

-- Avaliações de Reciclagem
CREATE TABLE IF NOT EXISTS public.avaliacoes_reciclagem (
  id serial not null, -- SERIAL é um alias para int4 auto-incrementável
  reciclagem_id bigint not null,
  usuario_id bigint null,
  agente_id bigint not null,
  rating integer not null,
  comentario text null,
  created_at timestamp without time zone not null default now(),
  constraint avaliacoes_reciclagem_pkey primary key (id),
  constraint avaliacoes_reciclagem_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete cascade, -- Avaliação some se agente sair
  constraint avaliacoes_reciclagem_reciclagem_id_fkey foreign KEY (reciclagem_id) references public.reciclagem (id) on delete cascade, -- Avaliação some se reciclagem sair
  constraint avaliacoes_reciclagem_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete set null, -- Avaliação fica anônima se usuário sair
  constraint avaliacoes_reciclagem_rating_check check (((rating >= 1) and (rating <= 5)))
);

/* ============================================================== */
/* TABLES: GESTÃO DE CAMPANHAS, RECOMPENSAS E CONQUISTAS         */
/* ============================================================== */

-- Campanhas
CREATE TABLE IF NOT EXISTS public.campanhas (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  titulo character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  status character varying(255) null default 'Ativo'::character varying,
  data_inicio date not null,
  data_fim date not null,
  pontos bigint null default 0,
  constraint campanhas_pkey primary key (id)
);

-- Conquistas
CREATE TABLE IF NOT EXISTS public.conquistas (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  pontos bigint null default 0,
  constraint conquistas_pkey primary key (id)
);

-- Recompensas
CREATE TABLE IF NOT EXISTS public.recompensas (
  id bigint generated by default as identity not null, -- Tornando auto-incrementável
  created_at timestamp without time zone not null default now(),
  nome character varying(255) not null,
  tipo character varying(255) null default null::character varying,
  descricao character varying(255) null default null::character varying,
  pontos bigint null default 0,
  qt_restante bigint null default 0,
  status VARCHAR(50) DEFAULT 'Ativo' CHECK (status IN ('Ativo', 'Inativo', 'Esgotado')), -- Adicionado do script anterior
  constraint recompensas_pkey primary key (id)
);

/* ============================================================== */
/* TABLES: GESTÃO FINANCEIRA (Investimentos)                      */
/* ============================================================== */

-- Investimentos
CREATE TABLE IF NOT EXISTS public.investimentos (
  id bigint generated by default as identity not null,
  nome character varying(255) not null,
  total_investido bigint null default 0,
  tipo character varying(255) not null,
  meta double precision null default '0'::double precision,
  status character varying null default 'Ativo'::character varying,
  created_at timestamp without time zone null default now(),
  constraint investimentos_pkey primary key (id)
  -- Removido: constraint investimentos_meta_check check ((meta > (0.0)::double precision)) -- CHECK pode ser complexo de gerir
);

-- Registro de Investimentos (Tabela 'investir')
CREATE TABLE IF NOT EXISTS public.investir (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  pontos_investidos bigint null default 0,
  usuario_id bigint null,
  investimento_id bigint null,
  data_retorno timestamp without time zone null,
  valor_retorno double precision null, -- Alterado para double precision
  constraint investir_pkey primary key (id),
  constraint investir_investimento_id_fkey foreign KEY (investimento_id) references public.investimentos (id) on delete set null,
  constraint investir_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete set null
  -- Removido: constraint investir_valor_retorno_check check ((valor_retorno > (- (0.1)::double precision)))
);

/* ============================================================== */
/* TABLES: SISTEMA DE NOTIFICAÇÕES E ALERTAS                      */
/* ============================================================== */

-- Alertas (PK precisa ser definida ou auto-incrementada)
CREATE TABLE IF NOT EXISTS public.alertas (
  id bigint generated by default as identity not null, -- Tornando auto-incrementável
  created_at timestamp without time zone not null default now(),
  mensagem character varying(255) not null,
  tipo character varying(255) null default null::character varying,
  ecoponto_id bigint null,
  constraint alertas_pkey primary key (id),
  constraint alertas_ecoponto_id_fkey foreign KEY (ecoponto_id) references public.ecopontos (id) on delete set null
);

-- Notificações
CREATE TABLE IF NOT EXISTS public.notificacoes (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  mensagem character varying(255) not null,
  tipo character varying(255) null default null::character varying,
  lidos bigint null default 0,
  data_expiracao timestamp without time zone null,
  usuario_id bigint null,
  agente_id bigint null,
  constraint notificacoes_pkey primary key (id),
  constraint notificacoes_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on update cascade on delete cascade,
  constraint notificacoes_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on update cascade on delete cascade
);

-- Notificações Lidas
CREATE TABLE IF NOT EXISTS public.notificacoes_lidas (
  id bigint generated by default as identity not null, -- PK própria
  usuario_id bigint null,
  notificacao_id bigint not null,
  data_leitura timestamp without time zone not null default now(),
  agente_id bigint null,
  constraint notificacoes_lidas_pkey primary key (id),
  constraint unique_agente_notificacao unique (agente_id, notificacao_id),
  constraint unique_usuario_notificacao unique (usuario_id, notificacao_id),
  constraint notificacoes_lidas_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete CASCADE,
  constraint notificacoes_lidas_notificacao_id_fkey foreign KEY (notificacao_id) references public.notificacoes (id) on delete CASCADE,
  constraint notificacoes_lidas_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete CASCADE,
  constraint check_leitor_presente check (((usuario_id is not null) or (agente_id is not null)))
);

-- Notificação de Investimento
CREATE TABLE IF NOT EXISTS public.notificacao_investimento (
  id bigserial not null,
  usuario_id bigint not null,
  investimento_id bigint not null,
  tipo character varying(50) not null,
  data_envio timestamp without time zone not null default now(),
  constraint notificacao_investimento_pkey primary key (id),
  constraint notificacao_investimento_usuario_id_investimento_id_tipo_key unique (usuario_id, investimento_id, tipo),
  constraint notificacao_investimento_investimento_id_fkey foreign KEY (investimento_id) references public.investimentos (id) on delete cascade,
  constraint notificacao_investimento_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete cascade
);


/* ============================================================== */
/* TABLES: SISTEMA DE TICKETS E RELATÓRIOS                        */
/* ============================================================== */

-- Tickets
CREATE TABLE IF NOT EXISTS public.tickets (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  tipo_operacao character varying(255) null default null::character varying,
  descricao character varying(255) null default null::character varying,
  status character varying(255) null default 'Valido'::character varying,
  data_validade timestamp without time zone null,
  saldo real null default 0,
  usuario_id bigint null,
  ticket_code character varying null,
  agente_id bigint null,
  constraint tickets_pkey primary key (id),
  constraint fk_tickets_agente foreign KEY (agente_id) references public.agentes (id) on update cascade on delete set null,
  constraint tickets_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete set null,
  constraint tickets_ticket_code_key unique (ticket_code) -- Adicionado UNIQUE para ticket_code
);

-- Relatórios (PK precisa ser definida ou auto-incrementada)
CREATE TABLE IF NOT EXISTS public.relatorios (
  id bigint generated by default as identity not null, -- Tornando auto-incrementável
  created_at timestamp without time zone not null default now(),
  tipo character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  admin_id bigint null,
  agente_id bigint null,
  departamento_id bigint null,
  constraint relatorios_pkey primary key (id),
  constraint relatorios_admin_id_fkey foreign KEY (admin_id) references public.administradores (id) on delete set null,
  constraint relatorios_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete set null,
  constraint relatorios_departamento_id_fkey foreign KEY (departamento_id) references public.departamentos (id) on delete set null
);

-- Logs de Auditoria
CREATE TABLE IF NOT EXISTS public.logs_auditoria (
  id bigint generated by default as identity not null,
  created_at timestamp without time zone not null default now(),
  acao character varying(255) not null,
  tipo character varying(255) null default null::character varying,
  admin_id bigint null,
  ecoponto_id bigint null,
  coleta_id bigint null,
  agente_id bigint null,
  usuario_id bigint null,
  departamento_id bigint null,
  reciclagem_id bigint null,
  ticket_id bigint null,
  tarefa_id bigint null,
  avaliacao_id bigint null,
  campanha_id bigint null,
  conquista_id bigint null,
  recompensa_id bigint null,
  investimento_id bigint null,
  notificacao_id bigint null,
  constraint logs_auditoria_pkey primary key (id),
  -- Chaves Estrangeiras (opcional para logs, mas ajuda)
  constraint fk_log_admin foreign KEY (admin_id) references public.administradores (id) on delete set null,
  constraint fk_log_agente foreign KEY (agente_id) references public.agentes (id) on delete set null,
  constraint fk_log_usuario foreign KEY (usuario_id) references public.usuarios (id) on delete set null,
  constraint fk_log_departamento foreign KEY (departamento_id) references public.departamentos (id) on delete set null,
  constraint fk_log_ecoponto foreign KEY (ecoponto_id) references public.ecopontos (id) on delete set null,
  constraint fk_log_coleta foreign KEY (coleta_id) references public.coletas (id) on delete set null,
  constraint fk_log_reciclagem foreign KEY (reciclagem_id) references public.reciclagem (id) on delete set null,
  constraint fk_log_ticket foreign KEY (ticket_id) references public.tickets (id) on delete set null,
  constraint fk_log_tarefa foreign KEY (tarefa_id) references public.tarefas_agente (id) on delete set null,
  constraint fk_log_avaliacao foreign KEY (avaliacao_id) references public.avaliacoes_reciclagem (id) on delete set null,
  constraint fk_log_campanha foreign KEY (campanha_id) references public.campanhas (id) on delete set null,
  constraint fk_log_conquista foreign KEY (conquista_id) references public.conquistas (id) on delete set null,
  constraint fk_log_recompensa foreign KEY (recompensa_id) references public.recompensas (id) on delete set null,
  constraint fk_log_investimento foreign KEY (investimento_id) references public.investimentos (id) on delete set null,
  constraint fk_log_notificacao foreign KEY (notificacao_id) references public.notificacoes (id) on delete set null
);


/* ============================================================== */
/* TABLES: TABELAS ASSOCIATIVAS                                   */
/* ============================================================== */

-- Certificados (Necessário antes da tabela associativa)
CREATE TABLE IF NOT EXISTS public.certificados (
  id bigint not null, -- Assumindo não auto-incrementado
  created_at timestamp without time zone not null default now(),
  certificado character varying(255) not null,
  descricao character varying(255) null default null::character varying,
  constraint certificados_pkey primary key (id)
);

-- Certificados x Candidatos
CREATE TABLE IF NOT EXISTS public.certificados_candidatos (
  candidato_id bigint not null,
  certificado_id bigint not null,
  constraint certificados_candidatos_pkey primary key (candidato_id, certificado_id),
  constraint certificados_candidatos_candidato_id_fkey foreign KEY (candidato_id) references public.candidatos (id) on delete cascade,
  constraint certificados_candidatos_certificado_id_fkey foreign KEY (certificado_id) references public.certificados (id) on delete cascade
);

-- Usuários x Campanhas
CREATE TABLE IF NOT EXISTS public.usuarios_campanhas (
  usuario_id bigint not null,
  campanha_id bigint not null,
  status character varying(50) null default 'Pendente'::character varying, -- Ajustado o tamanho
  constraint usuarios_campanhas_pkey primary key (usuario_id, campanha_id),
  constraint usuarios_campanhas_campanha_id_fkey foreign KEY (campanha_id) references public.campanhas (id) on delete cascade,
  constraint usuarios_campanhas_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete cascade
  -- Removido constraint check de tamanho desnecessária
);

-- Cargos x Agentes x Admins (Considerar se esta estrutura é a ideal)
CREATE TABLE IF NOT EXISTS public.cargos_agentes_admins (
  cargo_id bigint not null,
  agente_id bigint not null,
  admin_id bigint not null,
  constraint cargos_agentes_admins_pkey primary key (cargo_id, agente_id, admin_id),
  constraint cargos_agentes_admins_admin_id_fkey foreign KEY (admin_id) references public.administradores (id) on delete cascade,
  constraint cargos_agentes_admins_agente_id_fkey foreign KEY (agente_id) references public.agentes (id) on delete cascade,
  constraint cargos_agentes_admins_cargo_id_fkey foreign KEY (cargo_id) references public.cargos (id) on delete cascade
);

-- Campanhas x Reciclagem
CREATE TABLE IF NOT EXISTS public.campanhas_reciclagem (
  campanha_id bigint not null,
  reciclagem_id bigint not null,
  constraint campanhas_reciclagem_pkey primary key (campanha_id, reciclagem_id),
  constraint campanhas_reciclagem_campanha_id_fkey foreign KEY (campanha_id) references public.campanhas (id) on delete cascade,
  constraint campanhas_reciclagem_reciclagem_id_fkey foreign KEY (reciclagem_id) references public.reciclagem (id) on delete cascade
);

-- Conquistas x Usuários
CREATE TABLE IF NOT EXISTS public.conquistas_usuarios (
  data_conquista timestamp without time zone not null default now(),
  conquista_id bigint not null,
  usuario_id bigint not null,
  constraint conquistas_usuarios_pkey primary key (conquista_id, usuario_id),
  constraint conquistas_usuarios_conquista_id_fkey foreign KEY (conquista_id) references public.conquistas (id) on delete cascade,
  constraint conquistas_usuarios_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete cascade
);

-- Recompensas x Usuários
CREATE TABLE IF NOT EXISTS public.recompensas_usuarios (
  data_recompensa timestamp without time zone not null default now(),
  recompensa_id bigint not null,
  usuario_id bigint not null,
  constraint recompensas_usuarios_pkey primary key (recompensa_id, usuario_id),
  constraint recompensas_usuarios_recompensa_id_fkey foreign KEY (recompensa_id) references public.recompensas (id) on delete cascade,
  constraint recompensas_usuarios_usuario_id_fkey foreign KEY (usuario_id) references public.usuarios (id) on delete cascade
);

/* ============================================================== */
/* INDEXES                                                        */
/* ============================================================== */
-- (Recriar índices no final garante que as tabelas existem)
DROP INDEX IF EXISTS idx_usuarios_email; CREATE INDEX idx_usuarios_email ON public.usuarios(email);
DROP INDEX IF EXISTS idx_agentes_email; CREATE INDEX idx_agentes_email ON public.agentes(email);
DROP INDEX IF EXISTS idx_administradores_email; CREATE INDEX idx_administradores_email ON public.administradores(email);
DROP INDEX IF EXISTS idx_ecopontos_status; CREATE INDEX idx_ecopontos_status ON public.ecopontos(status);
DROP INDEX IF EXISTS idx_coletas_status; CREATE INDEX idx_coletas_status ON public.coletas(status);
DROP INDEX IF EXISTS idx_tickets_status; CREATE INDEX idx_tickets_status ON public.tickets(status);
DROP INDEX IF EXISTS idx_tickets_code; CREATE INDEX idx_tickets_code ON public.tickets(ticket_code);
DROP INDEX IF EXISTS idx_aval_reciclagem_agente; CREATE INDEX idx_aval_reciclagem_agente ON public.avaliacoes_reciclagem(agente_id);
DROP INDEX IF EXISTS idx_aval_reciclagem_reciclagem; CREATE INDEX idx_aval_reciclagem_reciclagem ON public.avaliacoes_reciclagem(reciclagem_id);
DROP INDEX IF EXISTS idx_tarefas_agente_agente_status; CREATE INDEX idx_tarefas_agente_agente_status ON public.tarefas_agente(agente_id, status);
DROP INDEX IF EXISTS idx_notif_lidas_notif_id; CREATE INDEX idx_notif_lidas_notif_id ON public.notificacoes_lidas(notificacao_id);


/* ============================================================== */
/* FUNCTIONS E TRIGGERS (Manter separados para clareza)           */
/* ============================================================== */

-- Funções e Triggers de HIERARQUIA (promover_candidato, etc.)
-- ... (Incluir o código das funções e triggers de hierarquia aqui) ...

-- Funções e Triggers de LOGS (log_reciclagem_insert, log_ticket_confirm_payment, etc.)
-- ... (Incluir o código das funções e triggers de log aqui) ...

-- Funções e Triggers de NOTIFICAÇÕES (notificar_capacidade, notificar_coleta, etc.)
-- ... (Incluir o código das funções e triggers de notificação aqui) ...

/*==============================================================*/
/* FUNCTIONS: GESTÃO DE HIERARQUIA DE FUNCIONÁRIOS                    */
/*==============================================================*/

-- Criar sequências para os IDs
CREATE SEQUENCE IF NOT EXISTS agentes_id_seq;
CREATE SEQUENCE IF NOT EXISTS administradores_id_seq;

-- Função para verificar se um candidato pode ser promovido a agente
CREATE OR REPLACE FUNCTION verificar_elegibilidade_candidato(
    p_candidato_id INT
) RETURNS BOOLEAN AS $$
BEGIN
    RETURN EXISTS (
        SELECT 1 FROM candidatos c
        WHERE c.id = p_candidato_id
        AND c.status = 'Em andamento'
        AND EXISTS (
            SELECT 1 FROM certificados_candidatos cc
            WHERE cc.candidato_id = c.id
        )
    );
END;
$$ LANGUAGE plpgsql;

-- Função para promover candidato a agente
CREATE OR REPLACE FUNCTION promover_candidato_para_agente(
    p_candidato_id BIGINT,
    p_admin_id BIGINT,
    p_departamento_id BIGINT,
    p_area TEXT,
    p_genero TEXT
) RETURNS BOOLEAN AS $$
DECLARE
    v_candidato RECORD;
    v_admin RECORD;
    v_departamento RECORD;
    v_novo_agente_id BIGINT;
BEGIN
    -- Verifica se o admin é do RH (departamento_id = 1)
    SELECT * INTO v_admin FROM administradores WHERE id = p_admin_id;
    IF v_admin.departamento_id != 1 THEN
        RAISE EXCEPTION 'Apenas administradores do RH podem promover candidatos';
    END IF;

    -- Verifica se o candidato existe e está elegível
    SELECT * INTO v_candidato FROM candidatos WHERE id = p_candidato_id;
    IF v_candidato.id IS NULL THEN
        RAISE EXCEPTION 'Candidato não encontrado';
    END IF;
    IF v_candidato.status != 'Em andamento' THEN
        RAISE EXCEPTION 'Candidato não está com status "Em andamento"';
    END IF;

    -- Verifica se o departamento existe
    SELECT * INTO v_departamento FROM departamentos WHERE id = p_departamento_id;
    IF v_departamento.id IS NULL THEN
        RAISE EXCEPTION 'Departamento não encontrado';
    END IF;

    -- Gera o próximo ID para o agente
    SELECT COALESCE(MAX(id), 0) + 1 INTO v_novo_agente_id FROM agentes;

    -- Cria o novo agente
    INSERT INTO agentes (
        id,
        nome,
        email,
        senha,
        telefone,
        genero,
        status,
        area,
        pontos_desempenho,
        departamento_id,
        candidato_id,
        created_at
    ) VALUES (
        v_novo_agente_id,
        v_candidato.nome,
        v_candidato.email,
        v_candidato.senha,
        v_candidato.telefone,
        p_genero,
        'Ativo',
        p_area,
        0,
        p_departamento_id,
        p_candidato_id,
        NOW()
    );

    -- Atualiza o status do candidato
    UPDATE candidatos 
    SET status = 'Aprovado'
    WHERE id = p_candidato_id;

    -- Incrementa o contador de pessoas no departamento
    UPDATE departamentos 
    SET pessoas = pessoas + 1
    WHERE id = p_departamento_id;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Erro na promoção: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

-- Function para promover agente a administrador
CREATE OR REPLACE FUNCTION promover_agente_para_administrador(
    p_agente_id BIGINT,
    p_departamento_id BIGINT,
    p_admin_id BIGINT DEFAULT NULL
) RETURNS BOOLEAN AS $$
DECLARE
    v_agente agentes%ROWTYPE;
    v_admin RECORD;
    v_departamento RECORD;
    v_novo_admin_id BIGINT;
    v_tempo_servico INTERVAL;
BEGIN
    -- Verifica se o admin é do departamento executivo (departamento_id = 2)
    IF p_admin_id IS NOT NULL THEN
        SELECT * INTO v_admin FROM administradores WHERE id = p_admin_id;
        IF v_admin.departamento_id != 2 THEN
            RAISE EXCEPTION 'Apenas administradores do departamento executivo podem promover agentes';
        END IF;
    END IF;

    -- Busca dados do agente e verifica elegibilidade
    SELECT * INTO v_agente 
    FROM agentes 
    WHERE id = p_agente_id;

    IF v_agente.id IS NULL THEN
        RAISE EXCEPTION 'Agente não encontrado';
    END IF;

    -- Verifica pontos de desempenho
    IF v_agente.pontos_desempenho < 10000 THEN
        RAISE EXCEPTION 'Agente precisa ter no mínimo 10.000 pontos de desempenho para ser promovido';
    END IF;

    -- Verifica tempo de serviço (1 ano)
    v_tempo_servico := NOW() - v_agente.created_at;
    IF v_tempo_servico < INTERVAL '1 year' THEN
        RAISE EXCEPTION 'Agente precisa ter no mínimo 1 ano de serviço para ser promovido';
    END IF;

    -- Verifica se o agente está ativo
    IF v_agente.status != 'Ativo' THEN
        RAISE EXCEPTION 'Apenas agentes com status Ativo podem ser promovidos';
    END IF;

    -- Verifica se o departamento existe
    SELECT * INTO v_departamento FROM departamentos WHERE id = p_departamento_id;
    IF v_departamento.id IS NULL THEN
        RAISE EXCEPTION 'Departamento não encontrado';
    END IF;

    -- Gera novo ID para o administrador
    SELECT COALESCE(MAX(id), 0) + 1 INTO v_novo_admin_id FROM administradores;

    -- Insere novo administrador
    INSERT INTO administradores (
        id,
        agente_id,
        email,
        senha,
        departamento_id,
        created_at
    ) VALUES (
        v_novo_admin_id,
        p_agente_id,
        v_agente.email,
        v_agente.senha,
        p_departamento_id,
        NOW()
    );

    -- Atualiza status do agente
    UPDATE agentes 
    SET status = 'Promovido'
    WHERE id = p_agente_id;

    -- Atualiza contador de pessoas nos departamentos
    IF v_agente.departamento_id IS NOT NULL THEN
        UPDATE departamentos 
        SET pessoas = pessoas - 1
        WHERE id = v_agente.departamento_id;
    END IF;
    
    UPDATE departamentos 
    SET pessoas = pessoas + 1
    WHERE id = p_departamento_id;

    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Erro na promoção: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

-- Cria sequência para logs_auditoria se não existir
DROP SEQUENCE IF EXISTS logs_auditoria_id_seq CASCADE;
CREATE SEQUENCE logs_auditoria_id_seq START WITH 1 INCREMENT BY 1;

-- Trigger para log de promoções
CREATE OR REPLACE FUNCTION registrar_log_promocao()
RETURNS TRIGGER AS $$
DECLARE
    v_log_id BIGINT;
BEGIN
    -- Gera o próximo ID para o log
    SELECT nextval('logs_auditoria_id_seq') INTO v_log_id;

    IF TG_TABLE_NAME = 'agentes' THEN
        -- Log para promoção de candidato para agente
        INSERT INTO logs_auditoria (
            id,
            acao,
            tipo,
            agente_id,
            departamento_id,
            created_at
        ) VALUES (
            v_log_id,
            'Promoção para Agente',
            'Promoção',
            NEW.id,
            NEW.departamento_id,
            NOW()
        );
    ELSIF TG_TABLE_NAME = 'administradores' THEN
        -- Log para promoção de agente para administrador
        INSERT INTO logs_auditoria (
            id,
            acao,
            tipo,
            admin_id,
            agente_id,
            departamento_id,
            created_at
        ) VALUES (
            v_log_id,
            'Promoção para Administrador',
            'Promoção',
            NEW.id,
            NEW.agente_id,
            NEW.departamento_id,
            NOW()
        );
    END IF;
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Erro ao registrar log: %', SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Recria os triggers
DROP TRIGGER IF EXISTS log_promocao_agente ON agentes;
DROP TRIGGER IF EXISTS log_promocao_administrador ON administradores;

CREATE TRIGGER log_promocao_agente
AFTER INSERT ON agentes
FOR EACH ROW
EXECUTE FUNCTION registrar_log_promocao();

CREATE TRIGGER log_promocao_administrador
AFTER INSERT ON administradores
FOR EACH ROW
EXECUTE FUNCTION registrar_log_promocao(); 